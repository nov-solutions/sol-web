name: Test

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up workflow with Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/hydrogen"

      - name: Remove .env file
        run: |
          rm -f .env

      - name: Create .env file
        run: |
          echo "ENVIRONMENT=prod" >> .env
          echo "NEXT_PUBLIC_SITE_NAME=sol" >> .env
          echo "NEXT_PUBLIC_SITE_BASE_DOMAIN=https://sol.grav.solutions" >> .env
          echo "SITE_DOMAIN=sol.grav.solutions" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DJANGO_SETTINGS_MODULE=settings" >> .env
          echo "POSTGRES_DB=soldb" >> .env
          echo "POSTGRES_USER=soluser" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "REDIS_HOST=redis" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env

      - name: Install Python dependencies; create Django static directory
        run: |
          cd ./web
          pip install -r requirements.txt
          python manage.py collectstatic --noinput

      - name: Build Docker containers
        run: |
          docker compose -f docker-compose.yaml -f docker-compose.prod.yaml up --build -d

      - name: Wait for Django container to be healthy
        timeout-minutes: 2
        run: |
          set -e

          docker logs -f newsolwebapp-web-django &
          LOG_PID=$!

          trap "echo 'Stop'; kill $LOG_PID" EXIT

          end=$((SECONDS+300))
          while [ $SECONDS -lt $end ]; do
            STATUS="$(docker inspect --format='{{.State.Health.Status}}' newsolwebapp-web-django || echo 'none')"
            if [ "$STATUS" = "healthy" ]; then
              echo "Django container is healthy!"
              echo "-------------------------------------------------"
              docker ps -a
              echo "-------------------------------------------------"
              kill $LOG_PID
              exit 0
            fi

            echo "-------------------------------------------------"
            echo "Waiting for Django container to be healthy..."
            echo "Status: $STATUS"
            echo "-------------------------------------------------"
            sleep 5
          done
          echo "Timed out waiting for Django container to be healthy."
          echo "-------------------------------------------------"
          docker ps -a
          echo "-------------------------------------------------"
          kill $LOG_PID
          exit 1

      - name: Run Django tests
        run: |
          docker exec newsolwebapp-web-django python manage.py test

      - name: Wait for Next.js container to be healthy
        timeout-minutes: 2
        run: |
          set -e

          docker logs -f newsolwebapp-web-nextjs &
          LOG_PID=$!

          trap "echo 'Stop'; kill $LOG_PID" EXIT

          end=$((SECONDS+300))
          while [ $SECONDS -lt $end ]; do
            STATUS="$(docker inspect --format='{{.State.Health.Status}}' newsolwebapp-web-nextjs || echo 'none')"
            if [ "$STATUS" = "healthy" ]; then
              echo "Next.js container is healthy!"
              echo "-------------------------------------------------"
              docker ps -a
              echo "-------------------------------------------------"
              kill $LOG_PID
              exit 0
            fi

            echo "-------------------------------------------------"
            echo "Waiting for Next.js container to be healthy..."
            echo "Status: $STATUS"
            echo "-------------------------------------------------"
            sleep 5
          done
          echo "Timed out waiting for Next.js container to be healthy."
          echo "-------------------------------------------------"
          docker ps -a
          echo "-------------------------------------------------"
          kill $LOG_PID
          exit 1

      - name: Bring down Docker containers
        run: docker compose down
