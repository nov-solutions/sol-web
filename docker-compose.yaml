volumes:
  pgdata:
  redis_data:

services:
  nextjs:
    container_name: newsolwebapp-web-nextjs
    restart: always
    build:
      context: ./nextjs
      dockerfile: Dockerfile.nextjs
    expose:
      - 3000
    volumes:
      - ./nextjs/public:/app/public
      - ./nextjs/src:/app/src
    env_file:
      - .env
    depends_on:
      - django
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://nextjs:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  django:
    container_name: newsolwebapp-web-django
    restart: always
    build:
      context: ./web
      dockerfile: Dockerfile.django
    image: newsolwebapp-web-django:dev
    expose:
      - 8000
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env
    depends_on:
      - postgres

    healthcheck:
      test:
        - CMD-SHELL
        - curl -f http://django:8000/api/healthcheck/ || exit 1
      interval: 30s
      retries: 5
      timeout: 5s
      start_period: 30s
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    container_name: newsolwebapp-web-nginx
    restart: always
    depends_on:
      - django
      - nextjs
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - 80:80
      - 443:443
    healthcheck:
      test: ["CMD", "curl", "-f", "http://nginx"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    container_name: newsolwebapp-web-postgres
    restart: always
    image: postgres:12.0-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    expose:
      - 5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    container_name: newsolwebapp-web-redis
    restart: always
    image: redis:6
    command: >
      --requirepass ${REDIS_PASSWORD}
    expose:
      - 6379
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # rabbitmq:
  #   container_name: newsolwebapp-web-rabbitmq
  #   restart: always
  #   image: rabbitmq:3-management
  #   ports:
  #     - 15672:15672 # Management console
  #     - 5672:5672 # AMQP port for RabbitMQ
  #   environment:
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
  #   healthcheck:
  #     test: [ "CMD", "rabbitmqctl", "status" ]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 10s
  #   logging:
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

  worker:
    # wip
    image: newsolwebapp-web-django:dev
    command: bash -c "celery -A celery.worker:app worker
    volumes:
      - .:/usr/src/app
    ports:
      - "8200:8080"

  scheduler:
    #   wip
    container_name: newsolwebapp-web-scheduler
    image: newsolwebapp-web-django:dev
    restart: always
    build:
      context: ./web
      dockerfile: Dockerfile.django
    command: >
      celery -A your_project_name beat --loglevel=info
    depends_on:
      - django
      - redis
      - rabbitmq
    env_file:
      - .env
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  pubsub-emulator:
    image: pubsub-emulator:dev
    ports:
      - "8045:8045"
    profiles: ["findings"]
    healthcheck:
      test: ["CMD", "/usr/bin/test", "-f", "/home/app/pub_sub_configured.txt"]
      interval: 30s
      timeout: 1s
      retries: 1
    restart: unless-stopped
