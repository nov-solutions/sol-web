---
description: Guidelines for understanding the file and logic structure of an app built with the sol template.
globs: **/*
alwaysApply: true
---

You are an expert full-stack engineer and you have been tasked with building a new app. You have decided to use the sol template to help you get started. The template is designed to help you get started quickly and easily build a robust, reliable, and responsive web app. The template provides a solid foundation for building a web app with a modern tech stack, including Django, React, and Next.js. The template also includes a CI/CD pipeline, Docker, and AWS CDK for deploying the app to the cloud.

<architecture>
**Cloud Infrastructure**
- AWS, a cloud computing services company, provides cloud services, such as application hosting, for the web app. The AWS CDK is used to provision most of the resources needed to run the web app in the cloud.
**Continuous Integration and Continuous Deployment**
- GitHub Actions, a CI/CD platform, automates the process of building, testing, and deploying the web app to the cloud. The .github/workflows directory contains the configuration files for the GitHub Actions workflows that run when code is pushed to the primary branch of the repository.
**Virtualization and Containerization**
- Docker, a bundle of PAAS products, enables the virtualization and containerization of the web app and standardizes the local development and production deployment environments.
**Data Layer**
- PostgreSQL, an open-source ORDBMS, handles persistent data storage. Data is interacted with through Django's ORM in the application layer.
**Application Layer**
- Python, a general-purpose, object-oriented programming language, handles the backend logic of the web app.
- Django, a Python web framework, expresses this logic and serves as the interface between the presentation and data layers via the Model-View-Template design pattern.
- Celery, a Python task queue, handles asynchronous tasks in the web app. Celery is configured to use Redis as its message broker.
**Presentation Layer**
- Typescript, a superset of Javascript, the core programming language of the Internet, handles the frontend logic of the web app.
- React, a Javascript and Typescript library, bundles this logic and provides a component-based framework for expressing it.
- Next.js, a React web framework, enables server-side rendering of React components and serves as the interface between the presentation and application layers via file system-based routing.
- Tailwind CSS, a utility-first, class-based CSS framework, simplifies the process of styling markup in the presentation layer.
- shadcn/ui, a component library for Tailwind CSS, provides several pre-built, customizable UI components.
**Web Server**
- Nginx, an open-source web server, acts as a reverse proxy that routes both external and internal traffic to the appropriate layer of the web app.
</architecture>

<structure>
(root)/\
├── .cursor/         # cursor rules files\
├── .github/         # github-specific files\
-│---└── workflows/\
-│---------├── deploy.yaml      # deployment workflow\
-|---------├── pre-commit.yaml  # pre-commit linting workflow\
-│---------└── test.yaml        # testing workflow\
├── cdk/             # aws deployment files\
-│---├── cdk/                   # contains all cdk stacks\
-│---├── cdk.json               # cdk configuration file\
-│---├── provision_app.py       # cdk script to provision the app\
-│---└── requirements.txt       # python dependencies\
├── nextjs/          # frontend code\
-│---├── public/                # static nextjs files (images, fonts, etc.)\
-│---------├── assets/          # assets folder\
-│----------------└── img/      # images folder\
-│---------└──  manifest.json    # web app manifest file\
-│---└── src/                   #\
-│---------├── app/                   # nextjs app router config folder\
-│---------├── components/            # contains all react components for the frontend\
-│---------├── hooks/                 # any react hooks\
-│---------├── layouts/               # basic layout templates used to construct pages\
-│---------├── providers/             # context providers for routing data\
-│---------├── constants.ts           # contains all constants used in the frontend\
-│---------├── components.json        # configuration for shadcn/ui components\
-│---------├── Dockerfile.nextjs      # dockerfile for nextjs module\
-│---------├── next-env.d.ts          # nextjs environment typescript file\
-│---------├── next.config.js         # nextjs configuration file\
-│---------├── package.json           # node dependencies\
-│---------├── postcss.config.js      # postcss configuration file\
-│---------├── tailwind.config.js     # tailwindcss configuration file\
-│---------└── tsconfig.json          # typescript configuration file\
├── nginx/           # reverse proxy configuration\
-│---├── dev/                   #\
-│---------└──  site.conf              # development reverse proxy config\
-│---└── prod/                  #\
-│---------└──  site.conf              # production reverse proxy config\
├── web/             # backend code\
-│---├── app/                   # central app that orchestrates all other apps\
-│---├── celeryapp/             # backend task scheduling\
-│---├── core/                  # app that contains core app logic\
-│---├── logs/                  # app that contains logging logic\
-│---├── mail/                  # app that contains email logic\
-│---├── settings/              # django app configuration and settings\
-│---├── spectacular/           # app that contains openapi logic\
-│---├── static/                # static files populated on build\
-│---├── user/                  # houses all user managment logic\
-│---├── Dockerfile.django      # dockerfile for django module\
-│---├── manage.py              # django management script\
-│---└── requirements.txt       # python dependencies\
├── .env                        # environment variables\
├── .gitignore                  # git ignore file\
├── .pre-commit-config.yaml     # pre-commit configuration file\
├── cert.sh                     # script to generate ssl certificates\
├── docker-compose.dev.yaml      # docker-compose configuration file for development\
├── docker-compose.prod.yaml     # docker-compose configuration file for production\
├── docker-compose.yaml          # docker-compose base configuration file\
├── Dockerfile.nginx             # dockerfile for nginx module\
├── exclude.txt                  # files to exclude from the sync to the cloud\
├── find_replace.py              # ephemeral script to find and replace text in files\
├── LICENSE.txt                  # license file\
├── Makefile                     # makefile for common commands\
└── README.md                    # readme file\
</structure>
